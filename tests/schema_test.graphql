enum Role {
    Admin
    Manager
    Developer
}
type User {
    id:ID!
    username:String
    roles:[Role!]
}
type ProductVariant {
    id:ID!

}
type Product {
    id:ID!
    title:String!
    author:User @access(roles: [Manager])
    variants(available:Boolean = true):[ProductVariant!]!
    wrongVariantReturnValue(available:Boolean = true):ProductVariant


}
type Money {
    currency:Currency!
    amount:Int!
}
type Order {
    id:ID!
    description:String!
    totalItemPrice:Money!
    products:[Product!]!
    random:Int!
}
type Query {
    products(searchString:String): [Product!]!
    productById(id:ID!):Product!
    orderById(id:ID!):Order!
}
input ProductInput {
    id:ID!
}
enum Currency {
    USD
    EUR
    UAH
    Bitcoin
}
input MoneyInput {
    currency:Currency!
    amount:Int!
}
input ProductDataInput {
    title:String
    price:MoneyInput

}
directive @access(roles: [Role!]!) on FIELD_DEFINITION|OBJECT|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION|INPUT_OBJECT
type AccessTest @access(roles: [Manager]) {

    forDev:Int! @access(roles: [Developer])
    forAdmin:Int! @access(roles: [Admin])

}
input AccessInput @access(roles: [Manager]) {
    something:Int! @access(roles: [Developer])
}

type Mutation {
    argumentAccessTest(arg:String! @access(roles: [Admin])):Int!
    typeAccessTest:AccessTest
    inputObjectAccessTest(arg:AccessInput!):Int!

    updateProduct(product:ProductInput!,data:ProductDataInput!): Product!   @access(roles: [Manager])

    createProduct(data:ProductDataInput!):Product! @access(roles: [Admin])
}
